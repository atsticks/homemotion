package org.homemotion.building.impl;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.inject.Singleton;

import org.homemotion.building.Building;
import org.homemotion.building.Floor;
import org.homemotion.building.FloorManager;
import org.homemotion.building.Room;
import org.homemotion.building.RoomManager;
import org.homemotion.config.ConfigSection;
import org.homemotion.config.Configuration;
import org.homemotion.config.Row;
import org.homemotion.dao.spi.AbstractConfiguredItemManager;

@Singleton
public class RoomManagerImpl extends AbstractConfiguredItemManager<Room> implements
		RoomManager {

	@Inject
	private FloorManager floorManager;

	public RoomManagerImpl() {
		super(Room.class, "building/Rooms");
	}

	public Collection<Room> getAllItems(Building building) {
		if (building == null) {
			return getAllItems();
		}
		List<Room> result = new ArrayList<Room>();
		for (Room room : getAllItems()) {
			if (room.getFloor()!=null && room.getFloor().getBuilding() != null
					&& room.getFloor().getBuilding().equals(building)) {
				result.add(room);
			}
		}
		return result;
	}

	@Override
	protected void load(Configuration configuration, Map<String, Room> items) {
		ConfigSection section = configuration.getSection("rooms");
		if (section != null) {
			for (Row row : section) {
				String[] fields = row.getFields("id", "floor", "ordinal");
				Room r = new Room(fields[0], getBinding());
				Floor floor = floorManager.get(fields[1]);
				if (floor == null) {
					logger.error("Invalid floor for room, ignoring room '"
							+ fields[0] + "': " + fields[1]);
					continue;
				}
				items.put(fields[0], r);
				// TODO handle transitive roles
			}
		}
		logger.info("Configured Rooms: " + this.items.keySet());
	}

}
