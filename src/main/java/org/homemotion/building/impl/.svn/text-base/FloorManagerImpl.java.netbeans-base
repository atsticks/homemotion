package org.homemotion.building.impl;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.inject.Singleton;

import org.homemotion.building.Building;
import org.homemotion.building.BuildingManager;
import org.homemotion.building.Floor;
import org.homemotion.building.FloorManager;
import org.homemotion.config.ConfigSection;
import org.homemotion.config.Configuration;
import org.homemotion.config.Row;
import org.homemotion.dao.spi.AbstractConfiguredItemManager;

@Singleton
public class FloorManagerImpl extends AbstractConfiguredItemManager<Floor>
		implements FloorManager {

	@Inject
	private BuildingManager buildingManager;

	public FloorManagerImpl() {
		super(Floor.class, "building/Floors");
	}

	public Collection<Floor> getAllItems(Building building) {
		if (building == null) {
			return getAllItems();
		}
		List<Floor> result = new ArrayList<Floor>();
		for (Floor floor : getAllItems()) {
			if (floor.getBuilding() != null
					&& floor.getBuilding().equals(building)) {
				result.add(floor);
			}
		}
		return result;
	}

	@Override
	protected void load(Configuration configuration, Map<String, Floor> items) {
		ConfigSection section = configuration.getSection("floors");
		if (section != null) {
			for (Row row : section) {
				String[] fields = row.getFields("id", "building", "ordinal");
				Floor r = new Floor(fields[0], getBinding());
				Building b = buildingManager.get(fields[1]);
				if (b == null) {
					logger.error("Invalid building for floor, ignoring building '"
							+ fields[0] + "': " + fields[1]);
					continue;
				}
				items.put(fields[0], r);
				// TODO handle transitive roles
			}
		}
		logger.info("Configured Floors: " + this.items.keySet());
	}

}
