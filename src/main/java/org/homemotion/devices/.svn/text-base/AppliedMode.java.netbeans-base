package org.homemotion.devices;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.homemotion.Mode;
import org.homemotion.dao.AbstractItem;

public class AppliedMode extends AbstractItem {
	private static final long serialVersionUID = -2314076868604364063L;

	private Mode mode = Mode.AUTO;

	private Mode originalMode;

	private Date startDate = new Date();

	private Date endDate;

	private boolean completed;

	private Device device;

	/**
	 * @return the startDate
	 */
	public Date getStartDate() {
		return startDate;
	}

	/**
	 * @param startDate
	 *            the startDate to set
	 */
	public void setStartDate(Date startDate) {
		this.startDate = startDate;
	}

	/**
	 * @return the endDate
	 */
	public Date getEndDate() {
		return endDate;
	}

	/**
	 * @param endDate
	 *            the endDate to set
	 */
	public void setEndDate(Date endDate) {
		this.endDate = endDate;
	}

	public boolean isActive() {
		if (completed) {
			return false;
		}
		if (startDate == null && endDate == null) {
			return true;
		}
		Date now = new Date();
		if (startDate == null) {
			return endDate.after(now);
		}
		if (endDate == null) {
			return startDate.before(now);
		}
		return startDate.before(now) && endDate.after(now);
	}

	public String toString() {
		StringBuilder b = new StringBuilder();
		b.append(getMode().toString());
		if (startDate != null) {
			b.append("START: ");
			b.append(startDate);
		}
		if (endDate != null) {
			b.append("ENDE: ");
			b.append(endDate);
		}
		return b.toString();
	}

	/**
	 * @return the mode
	 */
	public Mode getMode() {
		return mode;
	}

	/**
	 * @param mode
	 *            the mode to set
	 */
	public void setMode(Mode mode) {
		if (mode == null) {
			throw new IllegalArgumentException("Mode can not be null.");
		}
		this.mode = mode;
	}

	public Mode getOriginalMode() {
		return originalMode;
	}

	public void setOriginalMode(Mode originalMode) {
		this.originalMode = originalMode;
	}

	public boolean isCompleted() {
		return completed;
	}

	public void setCompleted(boolean completed) {
		this.completed = completed;
	}

	public boolean isMajor(AppliedMode otherMode) {
		if (otherMode.completed && !this.completed) {
			return true;
		}
		if (this.startDate != null && otherMode.startDate == null) {
			return true;
		}
		if (this.endDate != null && otherMode.endDate == null) {
			return true;
		}
		if (this.startDate != null && otherMode.startDate != null
				&& this.startDate.after(otherMode.startDate)) {
			return true;
		}
		if (this.endDate != null && otherMode.endDate != null
				&& this.endDate.before(otherMode.endDate)) {
			return true;
		}
		return false;
	}

	public void setDevice(Device device) {
		this.device = device;
	}

	public Device getDevice() {
		return device;
	}

}
